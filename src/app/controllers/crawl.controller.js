import axios from "axios";
import { parseStringPromise } from "xml2js";
import pLimit from "p-limit";
import { crawlArticleData } from "../../utils/crawlHelper.js";
import { getPostModel } from "../models/post.models.js";

/**
 * Crawl b√†i vi·∫øt t·ª´ sitemap v√† l∆∞u v√†o database.
 * G·ªçi qua API: POST /api/crawl
 */
const generateSlug = (title) => {
  const from = "√†√°·∫£√£·∫°√¢·∫ß·∫•·∫©·∫´·∫≠ƒÉ·∫±·∫Ø·∫≥·∫µ·∫∑√®√©·∫ª·∫Ω·∫π√™·ªÅ·∫ø·ªÉ·ªÖ·ªá√¨√≠·ªâƒ©·ªã√≤√≥·ªè√µ·ªç√¥·ªì·ªë·ªï·ªó·ªô∆°·ªù·ªõ·ªü·ª°·ª£√π√∫·ªß≈©·ª•∆∞·ª´·ª©·ª≠·ªØ·ª±·ª≥√Ω·ª∑·ªπ·ªµƒë";
  const to = "aaaaaaaaaaaaaaaaaeeeeeeeeeeeiiiiiooooooooooooooooouuuuuuuuuuuyyyyyd";

  const newTitle = title
    .toLowerCase()
    .split("")
    .map((char) => {
      const i = from.indexOf(char);
      return i !== -1 ? to[i] : char;
    })
    .join("");

  return newTitle.replace(/ /g, "-").replace(/[^\w-]+/g, "");
};
export const crawlFromSitemapController = async (req, res) => {
  const { url: customUrl } = req.body || {};
  const sitemapUrl = customUrl;

  if (!sitemapUrl) {
    return res.status(400).json({ success: false, message: "Thi·∫øu URL sitemap" });
  }

  const db = req.db; // n·∫øu b·∫°n d√πng middleware attach db
  const Post = getPostModel(db);

  const limit = pLimit(5); // gi·ªõi h·∫°n 5 request song song

  try {
    // üß≠ L·∫•y to√†n b·ªô URL t·ª´ sitemap
    async function getUrlsFromSitemap(sitemapUrl) {
      try {
        const { data } = await axios.get(sitemapUrl);
        const parsed = await parseStringPromise(data);

        if (parsed.sitemapindex) {
          const sitemaps = parsed.sitemapindex.sitemap.map((s) => s.loc[0]);
          console.log(`üìÇ Sitemap ch√≠nh ch·ª©a ${sitemaps.length} sitemap con.`);
          let allUrls = [];
          for (const sm of sitemaps) {
            const urls = await getUrlsFromSitemap(sm);
            allUrls = [...allUrls, ...urls];
          }
          return allUrls;
        }

        // Sitemap b√†i vi·∫øt
        const urls = parsed.urlset.url.map((item) => item.loc[0]);
        return urls;
      } catch (err) {
        console.error("‚ùå L·ªói ƒë·ªçc sitemap:", sitemapUrl, err.message);
        return [];
      }
    }

    // üß© B·∫Øt ƒë·∫ßu crawl
    const urls = await getUrlsFromSitemap(sitemapUrl);
    console.log(`üîç T√¨m th·∫•y ${urls.length} b√†i vi·∫øt.`);

    let count = 0;

    await Promise.all(
      urls.map((url) =>
        limit(async () => {
          try {
            const existing = await Post.findOne({ slug: url.split("/").filter(Boolean).pop() });
            if (existing) {
              console.log(`‚è© B·ªè qua (ƒë√£ c√≥): ${url}`);
              return;
            }

            const data = await crawlArticleData(url);

            // Chu·∫©n h√≥a d·ªØ li·ªáu ƒë·ªÉ ph√π h·ª£p v·ªõi Post model
            if (data && data.title && data.content) {
              const post = new Post({
                title: data.title,
                description: data.description || data.title,
                slug: generateSlug(data.title) || data.slug,
                content: data.content,
                authorName: data.authorName || "Ngu·ªìn kh√°c",
                authorUrl: data.authorUrl || "/profile/68b54477357138f28d16d110",
                publishedDate: new Date(),
                image: {
                  url: data.image || "",
                  alt: data.title || "",
                },
                tags: data.tags || [],
                likes: [],
                breadcrumbs: data.breadcrumbs || [
                  { name: "Trang Ch·ªß", url: "/" },
                  { name: "Blogs", url: "/bai-viet" },
                ],
              });

              await post.save();
              count++;
              console.log(`‚úÖ L∆∞u th√†nh c√¥ng: ${data.title}`);
            } else {
              console.log(`‚ö†Ô∏è B·ªè qua (thi·∫øu d·ªØ li·ªáu): ${url}`);
            }
          } catch (err) {
            console.error("‚ùå L·ªói khi crawl:", url, err.message);
          }
        })
      )
    );

    return res.status(200).json({
      success: true,
      message: `Crawl ho√†n t·∫•t ${count} b√†i vi·∫øt m·ªõi.`,
    });
  } catch (err) {
    console.error("‚ùå L·ªói t·ªïng:", err);
    return res.status(500).json({ success: false, message: "L·ªói crawl sitemap" });
  }
};
